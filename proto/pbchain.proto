syntax = "proto3";

package pbchain;

option go_package = "github.com/erdongli/pbchain/proto";

// A block header contains metadata about the block
message BlockHeader {
  // Block version number
  int32 version = 1;

  // The hash value of the previous block header
  bytes prev_block = 2;

  // A hash of all transactions included in the block
  bytes merkle_root = 3;

  // Unix epoch in seconds of when the block was created
  uint32 timestamp = 4;

  // The difficulty target being used for the block
  uint32 bits = 5;

  // The nonce used to generate the block
  uint32 nonce = 6;
}

// A block contains a block header and all the transactions associated with the block
message Block {
  // Block header
  BlockHeader header = 1;

  // A list of transactions
  repeated Transaction txs = 2;
}

// A transaction defines the movement of coins
message Transaction {
  // Protocol version number
  uint32 version = 1;

  // A list of transaction inputs
  repeated TxIn tx_ins = 2;

  // A list of transaction outputs
  repeated TxOut tx_outs = 3;
}

// A transaction input
message TxIn {
  // The reference to the previous transaction output
  OutPoint prev_output = 1;

  // The computational script for confirming transaction requirements
  repeated Instruc script_sig = 2;
}

// A transaction output
message TxOut {
  // Transaction value of the output
  uint64 amount = 1;

  // Conditions to claim the output
  repeated Instruc script_pubkey = 2;
}

// A reference to a transaction output
message OutPoint {
  // The referenced transaction's identifier
  bytes txid = 1;

  // The index of the referenced output in its transaction's output list
  uint32 index = 2;
}

// An instruction used for the processing of transactions
message Instruc {
  // An instruction can be one of a script opcode, a number, or a byte slice data
  oneof instruc {
    Op op = 1;
    int64 number = 2;
    bytes data = 3;
  }
}

// Script opcodes used by P2PK and P2PKH
enum Op {
  // Push an empty array of bytes onto the stack
  OP_0 = 0;

  // Marks transaction as invalid if top stack value is false, and remove the top stack item
  OP_VERIFY = 105;

  // Duplicate the top stack item
  OP_DUP = 118;

  // Push 1 onto the stack if the top two items are exactly equal, 0 otherwise
  OP_EQUAL = 135;

  // OP_EQUAL followed by an OP_VERIFY
  OP_EQUALVERIFY = 136;

  // RIPEMD-160(SHA-256(top stack item))
  OP_HASH160 = 169;

  // Check if the hash of the transaction matches with the signature
  OP_CHECKSIG = 172;
}

message PrivateKey {
  bytes d = 1;
}

message PublicKey {
  bytes x = 1;
  bytes y = 2;
}

message Signature {
  bytes r = 1;
  bytes s = 2;
}
